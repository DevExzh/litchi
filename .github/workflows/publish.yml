name: Publish to crates.io

on:
  # Trigger on new releases
  release:
    types: [published]
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run publish in dry-run mode'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

# Restrict workflow permissions to minimum required
permissions:
    contents: read
    # No write permissions by default

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  REPO_OWNER: DevExzh

jobs:
  publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - name: Verify repository owner
        run: |
          echo "Triggered by: ${{ github.actor }}"
          echo "Repository owner: ${{ env.REPO_OWNER }}"
          echo "Event name: ${{ github.event_name }}"
          
          # For releases, check if the release was created by the owner
          if [ "${{ github.event_name }}" = "release" ]; then
            if [ "${{ github.event.release.author.login }}" != "${{ env.REPO_OWNER }}" ]; then
              echo "❌ Error: Only the repository owner (${{ env.REPO_OWNER }}) can publish releases."
              echo "Release was created by: ${{ github.event.release.author.login }}"
              exit 1
            fi
          fi
          
          # For manual workflow dispatch, check if triggered by owner
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.actor }}" != "${{ env.REPO_OWNER }}" ] && [ "${{ github.actor }}" != "${{ github.repository_owner }}" ]; then
              echo "❌ Error: Only the repository owner (${{ env.REPO_OWNER }}) can manually trigger this workflow."
              echo "Triggered by: ${{ github.actor }}"
              exit 1
            fi
          fi
          
          echo "✅ Authorization check passed"
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-features --all-targets -- -D warnings

      - name: Build with all features
        run: cargo build --release --all-features

      - name: Run tests with all features
        run: cargo test --release --all-features

      - name: Verify package can be built
        run: cargo package --all-features --allow-dirty

      - name: Publish to crates.io (dry-run)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true'
        run: cargo publish --all-features --dry-run --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false')
        run: cargo publish --all-features --token ${{ secrets.CRATES_IO_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Create publication summary
        if: success()
        run: |
          echo "## 📦 Publication Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Package **litchi** has been successfully published to crates.io!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View on crates.io](https://crates.io/crates/litchi)" >> $GITHUB_STEP_SUMMARY
          echo "📚 [View documentation](https://docs.rs/litchi)" >> $GITHUB_STEP_SUMMARY
